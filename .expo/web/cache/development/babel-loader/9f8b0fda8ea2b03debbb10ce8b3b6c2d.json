{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ameed\\\\Desktop\\\\customtabbar-main\\\\Screens\\\\Outcome.js\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Icon from \"@expo/vector-icons/Entypo\";\nimport { COLORS, FONTS, SIZES } from \"../Constant/Thems\";\nimport icons from \"../Constant/icons\";\n\nfunction OutcomeCalculater(props) {\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      darkMode = _useState2[0],\n      setDarkMode = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentNumber = _useState4[0],\n      setCurrentNumber = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lastNumber = _useState6[0],\n      setLastNumber = _useState6[1];\n\n  var buttons = [\"C\", \"DEL\", \"/\", 7, 8, 9, \"*\", 4, 5, 6, \"-\", 1, 2, 3, \"+\", 0, \".\", \"=\"];\n  var styles = StyleSheet.create({\n    results: {\n      backgroundColor: darkMode ? \"#282f3b\" : \"#f5f5f5\",\n      maxWidth: \"100%\",\n      minHeight: \"44%\",\n      alignItems: \"flex-end\",\n      justifyContent: \"flex-end\"\n    },\n    resultText: {\n      maxHeight: 45,\n      color: \"#000\",\n      margin: 15,\n      fontSize: 35\n    },\n    historyText: {\n      color: darkMode ? \"#B5B7BB\" : \"#7c7c7c\",\n      fontSize: 20,\n      marginRight: 10,\n      alignSelf: \"flex-end\"\n    },\n    themeButton: {\n      alignSelf: \"flex-start\",\n      bottom: \"5%\",\n      margin: 15,\n      backgroundColor: darkMode ? \"#7b8084\" : \"#e5e5e5\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: 100,\n      height: 50,\n      borderRadius: 25\n    },\n    buttons: {\n      width: \"100%\",\n      height: \"29%\",\n      flexDirection: \"row\",\n      flexWrap: \"wrap\"\n    },\n    button: {\n      borderColor: darkMode ? \"#3f4d5b\" : \"#79b6b8\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      minWidth: \"24%\",\n      minHeight: \"54%\",\n      flex: 2\n    },\n    textButton: {\n      color: darkMode ? \"#b5b7bb\" : \"#000000\",\n      fontSize: 28\n    }\n  });\n\n  var handleInput = function handleInput(btnPressed) {\n    if (btnPressed === \"+\" || btnPressed === \"-\" || btnPressed === \"*\" || btnPressed === \"/\") {\n      setCurrentNumber(currentNumber + btnPressed);\n      return;\n    }\n\n    switch (btnPressed) {\n      case \"DEL\":\n        setCurrentNumber(currentNumber.substring(0, currentNumber.length - 1));\n        return;\n\n      case \"C\":\n        setLastNumber(\"\");\n        setCurrentNumber(\"\");\n        return;\n\n      case \"=\":\n        setLastNumber(currentNumber + \"=\");\n        calculate();\n        return;\n    }\n\n    setCurrentNumber(currentNumber + btnPressed);\n  };\n\n  var calculate = function calculate() {\n    var lastArr = currentNumber[currentNumber.length - 1];\n\n    if (lastArr === \"/\" || lastArr === \"*\" || lastArr === \"-\" || lastArr === \"+\" || lastArr === \".\") {\n      setCurrentNumber(currentNumber);\n    } else {\n      var result = eval(currentNumber).toString();\n      setCurrentNumber(result);\n      return;\n    }\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.themeButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, React.createElement(Icon, {\n    name: darkMode ? \"light-up\" : \"moon\",\n    size: 24,\n    color: darkMode ? \"white\" : \"black\",\n    onPress: function onPress() {\n      return darkMode ? setDarkMode(false) : setDarkMode(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  })), React.createElement(Text, {\n    style: styles.historyText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, lastNumber), React.createElement(Text, {\n    style: styles.resultText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, currentNumber)), React.createElement(View, {\n    style: styles.buttons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, buttons.map(function (btn) {\n    return btn === \"=\" || btn === \"/\" || btn === \"*\" || btn === \"-\" || btn === \"+\" ? React.createElement(TouchableOpacity, {\n      key: btn,\n      style: [styles.button, {\n        backgroundColor: \"#79b6b8\"\n      }],\n      onPress: function onPress() {\n        return handleInput(btn);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: [styles.textButton, {\n        color: \"white\",\n        fontSize: 28\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, btn)) : btn === 0 ? React.createElement(TouchableOpacity, {\n      key: btn,\n      style: [styles.button, {\n        backgroundColor: typeof btn === \"number\" ? darkMode ? \"#303946\" : \"#fff\" : darkMode === true ? \"#414853\" : \"#ededed\",\n        minWidth: \"36%\"\n      }],\n      onPress: function onPress() {\n        return handleInput(btn);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.textButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 15\n      }\n    }, btn)) : btn === \".\" || btn === \"DEL\" ? React.createElement(TouchableOpacity, {\n      key: btn,\n      style: [styles.button, {\n        backgroundColor: btn === \".\" ? darkMode ? \"#303946\" : \"#fff\" : darkMode === true ? \"#414853\" : \"#ededed\",\n        minWidth: \"37%\"\n      }],\n      onPress: function onPress() {\n        return handleInput(btn);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.textButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 15\n      }\n    }, btn)) : btn === \"C\" ? React.createElement(TouchableOpacity, {\n      key: btn,\n      style: [styles.button, {\n        backgroundColor: typeof btn === \"number\" ? darkMode ? \"#303946\" : \"#fff\" : darkMode === true ? \"#414853\" : \"#ededed\",\n        minWidth: \"36%\"\n      }],\n      onPress: function onPress() {\n        return handleInput(btn);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.textButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }\n    }, btn)) : React.createElement(TouchableOpacity, {\n      key: btn,\n      style: [styles.button, {\n        backgroundColor: typeof btn === \"number\" ? darkMode ? \"#303946\" : \"#fff\" : darkMode === true ? \"#414853\" : \"#ededed\"\n      }],\n      onPress: function onPress() {\n        return handleInput(btn);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.textButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }\n    }, btn));\n  })));\n}","map":{"version":3,"sources":["C:/Users/ameed/Desktop/customtabbar-main/Screens/Outcome.js"],"names":["React","useState","Icon","COLORS","FONTS","SIZES","icons","OutcomeCalculater","props","darkMode","setDarkMode","currentNumber","setCurrentNumber","lastNumber","setLastNumber","buttons","styles","StyleSheet","create","results","backgroundColor","maxWidth","minHeight","alignItems","justifyContent","resultText","maxHeight","color","margin","fontSize","historyText","marginRight","alignSelf","themeButton","bottom","width","height","borderRadius","flexDirection","flexWrap","button","borderColor","minWidth","flex","textButton","handleInput","btnPressed","substring","length","calculate","lastArr","result","eval","toString","map","btn"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { StyleSheet, View, Text, TouchableOpacity } from \"react-native\";\r\nimport Icon from \"react-native-vector-icons/Entypo\";\r\n\r\nimport { COLORS, FONTS, SIZES } from \"../Constant/Thems\";\r\nimport icons from \"../Constant/icons\";\r\nfunction OutcomeCalculater(props) {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [currentNumber, setCurrentNumber] = useState(\"\");\r\n  const [lastNumber, setLastNumber] = useState(\"\");\r\n  const buttons = [\r\n    \"C\",\r\n    \"DEL\",\r\n    \"/\",\r\n    7,\r\n    8,\r\n    9,\r\n    \"*\",\r\n    4,\r\n    5,\r\n    6,\r\n    \"-\",\r\n    1,\r\n    2,\r\n    3,\r\n    \"+\",\r\n    0,\r\n    \".\",\r\n    \"=\",\r\n  ];\r\n\r\n  const styles = StyleSheet.create({\r\n    results: {\r\n      backgroundColor: darkMode ? \"#282f3b\" : \"#f5f5f5\",\r\n      maxWidth: \"100%\",\r\n      minHeight: \"44%\",\r\n      alignItems: \"flex-end\",\r\n      justifyContent: \"flex-end\",\r\n    },\r\n    resultText: {\r\n      //Red Line what you write\r\n      maxHeight: 45,\r\n      color: \"#000\", // \"#79b6b8\", ////// Our Color\r\n      margin: 15,\r\n      fontSize: 35,\r\n    },\r\n    historyText: {\r\n      // Line of iterations (Displaye the Results)\r\n      color: darkMode ? \"#B5B7BB\" : \"#7c7c7c\",\r\n      fontSize: 20,\r\n      marginRight: 10,\r\n      alignSelf: \"flex-end\",\r\n    },\r\n    themeButton: {\r\n      //?\r\n      alignSelf: \"flex-start\",\r\n      bottom: \"5%\",\r\n      margin: 15,\r\n      backgroundColor: darkMode ? \"#7b8084\" : \"#e5e5e5\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      width: 100,\r\n      height: 50,\r\n      borderRadius: 25,\r\n    },\r\n    buttons: {\r\n      //buttuons\r\n      width: \"100%\",\r\n      height: \"29%\",\r\n      flexDirection: \"row\",\r\n      flexWrap: \"wrap\",\r\n    },\r\n    button: {\r\n      // Red\r\n      borderColor: darkMode ? \"#3f4d5b\" : \"#79b6b8\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      minWidth: \"24%\",\r\n      minHeight: \"54%\",\r\n      flex: 2,\r\n    },\r\n    textButton: {\r\n      //White Standerd Buttons\r\n      color: darkMode ? \"#b5b7bb\" : \"#000000\",\r\n      fontSize: 28,\r\n    },\r\n  });\r\n\r\n  const handleInput = (btnPressed) => {\r\n    if (\r\n      btnPressed === \"+\" ||\r\n      btnPressed === \"-\" ||\r\n      btnPressed === \"*\" ||\r\n      btnPressed === \"/\"\r\n    ) {\r\n      setCurrentNumber(currentNumber + btnPressed);\r\n      return;\r\n    }\r\n\r\n    switch (btnPressed) {\r\n      case \"DEL\":\r\n        setCurrentNumber(currentNumber.substring(0, currentNumber.length - 1));\r\n        return;\r\n      case \"C\":\r\n        setLastNumber(\"\");\r\n        setCurrentNumber(\"\");\r\n        return;\r\n      case \"=\":\r\n        setLastNumber(currentNumber + \"=\");\r\n        calculate();\r\n        return;\r\n    }\r\n    setCurrentNumber(currentNumber + btnPressed);\r\n  };\r\n\r\n  const calculate = () => {\r\n    let lastArr = currentNumber[currentNumber.length - 1];\r\n    if (\r\n      lastArr === \"/\" ||\r\n      lastArr === \"*\" ||\r\n      lastArr === \"-\" ||\r\n      lastArr === \"+\" ||\r\n      lastArr === \".\"\r\n    ) {\r\n      setCurrentNumber(currentNumber);\r\n    } else {\r\n      let result = eval(currentNumber).toString();\r\n      setCurrentNumber(result);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <View style={styles.results}>\r\n        <TouchableOpacity style={styles.themeButton}>\r\n          <Icon\r\n            name={darkMode ? \"light-up\" : \"moon\"}\r\n            size={24}\r\n            color={darkMode ? \"white\" : \"black\"}\r\n            onPress={() => (darkMode ? setDarkMode(false) : setDarkMode(true))}\r\n          />\r\n        </TouchableOpacity>\r\n        <Text style={styles.historyText}>{lastNumber}</Text>\r\n        <Text style={styles.resultText}>{currentNumber}</Text>\r\n      </View>\r\n      <View style={styles.buttons}>\r\n        {buttons.map((btn) =>\r\n          btn === \"=\" ||\r\n          btn === \"/\" ||\r\n          btn === \"*\" ||\r\n          btn === \"-\" ||\r\n          btn === \"+\" ? (\r\n            <TouchableOpacity\r\n              key={btn}\r\n              style={[styles.button, { backgroundColor: \"#79b6b8\" }]}\r\n              onPress={() => handleInput(btn)}\r\n            >\r\n              <Text\r\n                style={[styles.textButton, { color: \"white\", fontSize: 28 }]}\r\n              >\r\n                {btn}\r\n              </Text>\r\n            </TouchableOpacity>\r\n          ) : btn === 0 ? (\r\n            <TouchableOpacity\r\n              key={btn}\r\n              style={[\r\n                styles.button,\r\n                {\r\n                  backgroundColor:\r\n                    typeof btn === \"number\"\r\n                      ? darkMode\r\n                        ? \"#303946\"\r\n                        : \"#fff\"\r\n                      : darkMode === true\r\n                      ? \"#414853\"\r\n                      : \"#ededed\",\r\n                  minWidth: \"36%\",\r\n                },\r\n              ]}\r\n              onPress={() => handleInput(btn)}\r\n            >\r\n              <Text style={styles.textButton}>{btn}</Text>\r\n            </TouchableOpacity>\r\n          ) : btn === \".\" || btn === \"DEL\" ? (\r\n            <TouchableOpacity\r\n              key={btn}\r\n              style={[\r\n                styles.button,\r\n                {\r\n                  backgroundColor:\r\n                    btn === \".\"\r\n                      ? darkMode\r\n                        ? \"#303946\"\r\n                        : \"#fff\"\r\n                      : darkMode === true\r\n                      ? \"#414853\"\r\n                      : \"#ededed\",\r\n                  minWidth: \"37%\",\r\n                },\r\n              ]}\r\n              onPress={() => handleInput(btn)}\r\n            >\r\n              <Text style={styles.textButton}>{btn}</Text>\r\n            </TouchableOpacity>\r\n          ) : btn === \"C\" ? (\r\n            <TouchableOpacity\r\n              key={btn}\r\n              style={[\r\n                styles.button,\r\n                {\r\n                  backgroundColor:\r\n                    typeof btn === \"number\"\r\n                      ? darkMode\r\n                        ? \"#303946\"\r\n                        : \"#fff\"\r\n                      : darkMode === true\r\n                      ? \"#414853\"\r\n                      : \"#ededed\",\r\n                  minWidth: \"36%\",\r\n                },\r\n              ]}\r\n              onPress={() => handleInput(btn)}\r\n            >\r\n              <Text style={styles.textButton}>{btn}</Text>\r\n            </TouchableOpacity>\r\n          ) : (\r\n            <TouchableOpacity\r\n              key={btn}\r\n              style={[\r\n                styles.button,\r\n                {\r\n                  backgroundColor:\r\n                    typeof btn === \"number\"\r\n                      ? darkMode\r\n                        ? \"#303946\"\r\n                        : \"#fff\"\r\n                      : darkMode === true\r\n                      ? \"#414853\"\r\n                      : \"#ededed\",\r\n                },\r\n              ]}\r\n              onPress={() => handleInput(btn)}\r\n            >\r\n              <Text style={styles.textButton}>{btn}</Text>\r\n            </TouchableOpacity>\r\n          )\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}