{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\ameed\\\\Desktop\\\\customtabbar-main\\\\Screens\\\\Outcome.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Icon from \"@expo/vector-icons/Entypo\";\nimport { COLORS, FONTS, SIZES, icons, images } from \"../constants\";\n\nfunction OutcomeCalculater(props) {\n  return React.createElement(View, {\n    style: {\n      backgroundColor: COLORS.layanWhite,\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({\n      color: COLORS.ourThem\n    }, FONTS.h2), {}, {\n      paddingVertical: 15\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }\n  }, \" \", \"Add Your New Expense\", \" \"), React.createElement(View, {\n    style: {\n      paddingHorizontal: SIZES.padding,\n      paddingVertical: SIZES.padding3,\n      alignItems: \"center\",\n      backgroundColor: COLORS.layanWhite\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      marginTop: SIZES.padding3,\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: COLORS.ourThem,\n      height: 50,\n      width: 50,\n      borderRadius: 25,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, React.createElement(Image, {\n    source: icons.calendar,\n    style: {\n      width: 20,\n      height: 20,\n      tintColor: COLORS.layanWhite\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    style: {\n      marginLeft: SIZES.padding3,\n      marginLeft: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread({\n      color: COLORS.ourThem\n    }, FONTS.h2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }\n  }, \" \", \"Satarday, 26 Sep\", \" \")))));\n}\n\nexport default OutcomeCalculater;","map":{"version":3,"sources":["C:/Users/ameed/Desktop/customtabbar-main/Screens/Outcome.js"],"names":["React","useState","Icon","COLORS","FONTS","SIZES","icons","images","OutcomeCalculater","props","backgroundColor","layanWhite","alignItems","color","ourThem","h2","paddingVertical","paddingHorizontal","padding","padding3","flexDirection","marginTop","height","width","borderRadius","justifyContent","calendar","tintColor","marginLeft"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,OAAOC,IAAP;AAEA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,MAAtC;;AA0PA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAEP,MAAM,CAACQ,UAA1B;AAAsCC,MAAAA,UAAU,EAAE;AAAlD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK;AAAIC,MAAAA,KAAK,EAAEV,MAAM,CAACW;AAAlB,OAA8BV,KAAK,CAACW,EAApC;AAAwCC,MAAAA,eAAe,EAAE;AAAzD,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,0BAEuB,GAFvB,CADF,EAME,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,iBAAiB,EAAEZ,KAAK,CAACa,OADpB;AAELF,MAAAA,eAAe,EAAEX,KAAK,CAACc,QAFlB;AAGLP,MAAAA,UAAU,EAAE,QAHP;AAILF,MAAAA,eAAe,EAAEP,MAAM,CAACQ;AAJnB,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLS,MAAAA,aAAa,EAAE,KADV;AAELC,MAAAA,SAAS,EAAEhB,KAAK,CAACc,QAFZ;AAGLP,MAAAA,UAAU,EAAE;AAHP,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,eAAe,EAAEP,MAAM,CAACW,OADnB;AAELQ,MAAAA,MAAM,EAAE,EAFH;AAGLC,MAAAA,KAAK,EAAE,EAHF;AAILC,MAAAA,YAAY,EAAE,EAJT;AAKLC,MAAAA,cAAc,EAAE,QALX;AAMLb,MAAAA,UAAU,EAAE;AANP,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAEN,KAAK,CAACoB,QADhB;AAEE,IAAA,KAAK,EAAE;AACLH,MAAAA,KAAK,EAAE,EADF;AAELD,MAAAA,MAAM,EAAE,EAFH;AAGLK,MAAAA,SAAS,EAAExB,MAAM,CAACQ;AAHb,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CAPF,EA2BE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEiB,MAAAA,UAAU,EAAEvB,KAAK,CAACc,QAApB;AAA8BS,MAAAA,UAAU,EAAE;AAA1C,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK;AAAIf,MAAAA,KAAK,EAAEV,MAAM,CAACW;AAAlB,OAA8BV,KAAK,CAACW,EAApC,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,sBAEmB,GAFnB,CADF,CA3BF,CARF,CANF,CADF;AAoDD;;AACD,eAAeP,iBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { StyleSheet, View, Text, TouchableOpacity } from \"react-native\";\r\nimport Icon from \"react-native-vector-icons/Entypo\";\r\n\r\nimport { COLORS, FONTS, SIZES, icons, images } from \"../constants\";\r\n\r\n// function OutcomeCalculater(props) {\r\n//   const [darkMode, setDarkMode] = useState(false);\r\n//   const [currentNumber, setCurrentNumber] = useState(\"\");\r\n//   const [lastNumber, setLastNumber] = useState(\"\");\r\n//   const buttons = [\r\n//     \"C\",\r\n//     \"DEL\",\r\n//     \"/\",\r\n//     7,\r\n//     8,\r\n//     9,\r\n//     \"*\",\r\n//     4,\r\n//     5,\r\n//     6,\r\n//     \"-\",\r\n//     1,\r\n//     2,\r\n//     3,\r\n//     \"+\",\r\n//     0,\r\n//     \".\",\r\n//     \"=\",\r\n//   ];\r\n\r\n//   const styles = StyleSheet.create({\r\n//     results: {\r\n//       backgroundColor: darkMode ? \"#282f3b\" : \"#f5f5f5\",\r\n//       maxWidth: \"100%\",\r\n//       minHeight: \"44%\",\r\n//       alignItems: \"flex-end\",\r\n//       justifyContent: \"flex-end\",\r\n//     },\r\n//     resultText: {\r\n//       //Red Line what you write\r\n//       maxHeight: 45,\r\n//       color: \"#000\", // \"#79b6b8\", ////// Our Color\r\n//       margin: 15,\r\n//       fontSize: 35,\r\n//     },\r\n//     historyText: {\r\n//       // Line of iterations (Displaye the Results)\r\n//       color: darkMode ? \"#B5B7BB\" : \"#7c7c7c\",\r\n//       fontSize: 20,\r\n//       marginRight: 10,\r\n//       alignSelf: \"flex-end\",\r\n//     },\r\n//     themeButton: {\r\n//       //?\r\n//       alignSelf: \"flex-start\",\r\n//       bottom: \"5%\",\r\n//       margin: 15,\r\n//       backgroundColor: darkMode ? \"#7b8084\" : \"#e5e5e5\",\r\n//       alignItems: \"center\",\r\n//       justifyContent: \"center\",\r\n//       width: 100,\r\n//       height: 50,\r\n//       borderRadius: 25,\r\n//     },\r\n//     buttons: {\r\n//       //buttuons\r\n//       width: \"100%\",\r\n//       height: \"29%\",\r\n//       flexDirection: \"row\",\r\n//       flexWrap: \"wrap\",\r\n//     },\r\n//     button: {\r\n//       // Red\r\n//       borderColor: darkMode ? \"#3f4d5b\" : \"#79b6b8\",\r\n//       alignItems: \"center\",\r\n//       justifyContent: \"center\",\r\n//       minWidth: \"24%\",\r\n//       minHeight: \"54%\",\r\n//       flex: 2,\r\n//     },\r\n//     textButton: {\r\n//       //White Standerd Buttons\r\n//       color: darkMode ? \"#b5b7bb\" : \"#000000\",\r\n//       fontSize: 28,\r\n//     },\r\n//   });\r\n\r\n//   const handleInput = (btnPressed) => {\r\n//     if (\r\n//       btnPressed === \"+\" ||\r\n//       btnPressed === \"-\" ||\r\n//       btnPressed === \"*\" ||\r\n//       btnPressed === \"/\"\r\n//     ) {\r\n//       setCurrentNumber(currentNumber + btnPressed);\r\n//       return;\r\n//     }\r\n\r\n//     switch (btnPressed) {\r\n//       case \"DEL\":\r\n//         setCurrentNumber(currentNumber.substring(0, currentNumber.length - 1));\r\n//         return;\r\n//       case \"C\":\r\n//         setLastNumber(\"\");\r\n//         setCurrentNumber(\"\");\r\n//         return;\r\n//       case \"=\":\r\n//         setLastNumber(currentNumber + \"=\");\r\n//         calculate();\r\n//         return;\r\n//     }\r\n//     setCurrentNumber(currentNumber + btnPressed);\r\n//   };\r\n\r\n//   const calculate = () => {\r\n//     let lastArr = currentNumber[currentNumber.length - 1];\r\n//     if (\r\n//       lastArr === \"/\" ||\r\n//       lastArr === \"*\" ||\r\n//       lastArr === \"-\" ||\r\n//       lastArr === \"+\" ||\r\n//       lastArr === \".\"\r\n//     ) {\r\n//       setCurrentNumber(currentNumber);\r\n//     } else {\r\n//       let result = eval(currentNumber).toString();\r\n//       setCurrentNumber(result);\r\n//       return;\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <View>\r\n//       <View style={styles.results}>\r\n//         <TouchableOpacity style={styles.themeButton}>\r\n//           <Icon\r\n//             name={darkMode ? \"light-up\" : \"moon\"}\r\n//             size={24}\r\n//             color={darkMode ? \"white\" : \"black\"}\r\n//             onPress={() => (darkMode ? setDarkMode(false) : setDarkMode(true))}\r\n//           />\r\n//         </TouchableOpacity>\r\n//         <Text style={styles.historyText}>{lastNumber}</Text>\r\n//         <Text style={styles.resultText}>{currentNumber}</Text>\r\n//       </View>\r\n//       <View style={styles.buttons}>\r\n//         {buttons.map((btn) =>\r\n//           btn === \"=\" ||\r\n//           btn === \"/\" ||\r\n//           btn === \"*\" ||\r\n//           btn === \"-\" ||\r\n//           btn === \"+\" ? (\r\n//             <TouchableOpacity\r\n//               key={btn}\r\n//               style={[styles.button, { backgroundColor: \"#79b6b8\" }]}\r\n//               onPress={() => handleInput(btn)}\r\n//             >\r\n//               <Text\r\n//                 style={[styles.textButton, { color: \"white\", fontSize: 28 }]}\r\n//               >\r\n//                 {btn}\r\n//               </Text>\r\n//             </TouchableOpacity>\r\n//           ) : btn === 0 ? (\r\n//             <TouchableOpacity\r\n//               key={btn}\r\n//               style={[\r\n//                 styles.button,\r\n//                 {\r\n//                   backgroundColor:\r\n//                     typeof btn === \"number\"\r\n//                       ? darkMode\r\n//                         ? \"#303946\"\r\n//                         : \"#fff\"\r\n//                       : darkMode === true\r\n//                       ? \"#414853\"\r\n//                       : \"#ededed\",\r\n//                   minWidth: \"36%\",\r\n//                 },\r\n//               ]}\r\n//               onPress={() => handleInput(btn)}\r\n//             >\r\n//               <Text style={styles.textButton}>{btn}</Text>\r\n//             </TouchableOpacity>\r\n//           ) : btn === \".\" || btn === \"DEL\" ? (\r\n//             <TouchableOpacity\r\n//               key={btn}\r\n//               style={[\r\n//                 styles.button,\r\n//                 {\r\n//                   backgroundColor:\r\n//                     btn === \".\"\r\n//                       ? darkMode\r\n//                         ? \"#303946\"\r\n//                         : \"#fff\"\r\n//                       : darkMode === true\r\n//                       ? \"#414853\"\r\n//                       : \"#ededed\",\r\n//                   minWidth: \"37%\",\r\n//                 },\r\n//               ]}\r\n//               onPress={() => handleInput(btn)}\r\n//             >\r\n//               <Text style={styles.textButton}>{btn}</Text>\r\n//             </TouchableOpacity>\r\n//           ) : btn === \"C\" ? (\r\n//             <TouchableOpacity\r\n//               key={btn}\r\n//               style={[\r\n//                 styles.button,\r\n//                 {\r\n//                   backgroundColor:\r\n//                     typeof btn === \"number\"\r\n//                       ? darkMode\r\n//                         ? \"#303946\"\r\n//                         : \"#fff\"\r\n//                       : darkMode === true\r\n//                       ? \"#414853\"\r\n//                       : \"#ededed\",\r\n//                   minWidth: \"36%\",\r\n//                 },\r\n//               ]}\r\n//               onPress={() => handleInput(btn)}\r\n//             >\r\n//               <Text style={styles.textButton}>{btn}</Text>\r\n//             </TouchableOpacity>\r\n//           ) : (\r\n//             <TouchableOpacity\r\n//               key={btn}\r\n//               style={[\r\n//                 styles.button,\r\n//                 {\r\n//                   backgroundColor:\r\n//                     typeof btn === \"number\"\r\n//                       ? darkMode\r\n//                         ? \"#303946\"\r\n//                         : \"#fff\"\r\n//                       : darkMode === true\r\n//                       ? \"#414853\"\r\n//                       : \"#ededed\",\r\n//                 },\r\n//               ]}\r\n//               onPress={() => handleInput(btn)}\r\n//             >\r\n//               <Text style={styles.textButton}>{btn}</Text>\r\n//             </TouchableOpacity>\r\n//           )\r\n//         )}\r\n//       </View>\r\n//     </View>\r\n//   );\r\n// }\r\n\r\nfunction OutcomeCalculater(props) {\r\n  return (\r\n    <View style={{ backgroundColor: COLORS.layanWhite, alignItems: \"center\" }}>\r\n      <Text style={{ color: COLORS.ourThem, ...FONTS.h2, paddingVertical: 15 }}>\r\n        {\" \"}\r\n        Add Your New Expense{\" \"}\r\n      </Text>\r\n\r\n      <View\r\n        style={{\r\n          paddingHorizontal: SIZES.padding,\r\n          paddingVertical: SIZES.padding3,\r\n          alignItems: \"center\",\r\n          backgroundColor: COLORS.layanWhite,\r\n        }}\r\n      >\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            marginTop: SIZES.padding3,\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <View\r\n            style={{\r\n              backgroundColor: COLORS.ourThem,\r\n              height: 50,\r\n              width: 50,\r\n              borderRadius: 25,\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Image\r\n              source={icons.calendar}\r\n              style={{\r\n                width: 20,\r\n                height: 20,\r\n                tintColor: COLORS.layanWhite,\r\n              }}\r\n            />\r\n          </View>\r\n\r\n          <View style={{ marginLeft: SIZES.padding3, marginLeft: 5 }}>\r\n            <Text style={{ color: COLORS.ourThem, ...FONTS.h2 }}>\r\n              {\" \"}\r\n              Satarday, 26 Sep{\" \"}\r\n            </Text>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\nexport default OutcomeCalculater;\r\n"]},"metadata":{},"sourceType":"module"}